<?php
// $Id$
/**
 * @file
 * Module for venue
 */
	/**
	* Implementation of hook_help()
	*/
	function venue_help($path, $arg) {
		if( $path == 'admin/help#venue' )
		{
			$txt = 'This module displays the details of venue page.  It assumes the existence of a content type named venue';
		}
		
		return '<p>' . $txt . '</p>';
	}	
	
	
	function venue_node_info()	{		
		return array(
			'venue' => array(
				'name' => t('venue Details'),
				'module' => 'venue',
				'description' => t('A venue page.'),
				'has_title' => TRUE,
				'title_label' => t('venue Name'),
				'has_body' => TRUE,
				'body_label' => t('venue body'),
			)
		);
	}
	
	
	function venue_form(&$node)	{
		
		$type = node_get_types( 'type', $node );
		if($type->has_title)		{
			$form['title'] = array(
				'#type' => 'textfield',
				'#title' => check_plain( $type->title_label),
				'#required' =>TRUE,
				'#default_value' => $node->title,
				'#weight' => -5,
			);	
		}
		if( $type->has_body ) {
			$form['body_field'] = node_body_field(
				$node,
				$type->body_label,
				$type->min_word_count
			);	
		}
		
	
		$form['longitude'] = array(
			'#type' => 'textfield',
			'#title' => t('Venue longitude'),
			'#required' =>TRUE,
			'#default_value' => 0,
		);
		
		$form['latitude'] = array(
			'#type' => 'textfield',
			'#title' => t('Venue latitude'),
			'#required' =>TRUE,
			'#default_value' => 0,
		);
		
		
		
	
		return $form;
	}

	
	
	/**
	 * Insert hook for when new venues are added. 
	 */
	function venue_insert($node) {
		
		// Insert the custom data in $node into the venues table.

	$sql = sprintf(
			'INSERT INTO {venues} (nid, longitude, latitude) ' .
			"VALUES (%d, '%s', '%s' )",
			$node->nid,
			$node->longitude,
			$node->latitude);
		 
			db_query($sql);
		// maybe: menu_link_save?
	}
	
	/**
	 * Implementation of hook_update, for when a venue node is updated.
	 */
	 function venue_update($node) {
		 if ($node->revision) {
			venue_insert($node);	 
		 }
		 else {
			 db_query(
			 	"UPDATE {venues} " .
			 	"SET longitude = '%s', latitude = '%s' " .
			 	"WHERE nid = %d AND vid= %d",
			 	$node->longitude,
			 	$node->latitude,
			 	$node->nid,
			 	$node->vid
			 );
		 }
	 }
	
	/**
	 * Implementation of hook_delete, for when a venue node is deleted.
	 */
	function venue_delete($node) {
		db_query(
			"DELETE FROM {venues} WHERE nid = %d",
			$node->nid
		);			
	}
	
	/**
	 * Implementation of hook_nodeapi, for when individual revisions need to be deleted.
	 */
	 function venue_nodeapi(&$node, $op, $teaser, $page) {
		if ($op == "delete revision") {
			db_query(
				"DELETE FROM (venues) WHERE nid = %d",
				$node->nid
			);
		}
	 }
	 
	
	/**
	 * Implementation of hook_load for our custom data.
	 */  	
	function venue_load($node) {

		
        $sql = sprintf(
        	"SELECT longitude, latitude " .
			"FROM {venues} WHERE nid = %d",
			$node->nid);
        $result = db_query($sql); 
		$obj = db_fetch_object($result);		
		
		return $obj;
        
	}
	
	/**
	 * Implementation of hook_view for our custom data
	 */
	function venue_view($node, $teaser = FALSE, $page = FALSE)	{
		$node = node_prepare($node, $teaser);	
		return $node;
	}
	
	function venue_perm()
	{
		return array(
			'create venue node',
			'edit venue nodes',
			'delete venue nodes',
		);
	}
	
	function venue_access($op, $node, $account)	{
		switch( $op )
		{
			case 'create':
				return user_access('create venue node', $account );
			case 'update':
				return user_access('edit venue nodes', $account );
			case 'delete':
				return user_access('delete venue nodes', $account );		
		}
	}